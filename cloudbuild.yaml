steps:
  # 1. Build the Docker image
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REGISTRY_ID}/${_REPO_NAME}:${SHORT_SHA}"
      - "."

  # 2. Push the image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REGISTRY_ID}/${_REPO_NAME}:${SHORT_SHA}"

  # 3. Get the application's environment variables from Secret Manager
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - "gcloud secrets versions access latest --secret=${_ENV_SECRET_NAME} > /workspace/env_vars"

  # 4. Deploy to GCE using a secure environment file
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Define bash variables. Cloud Build substitutions like ${_REPO_NAME} are processed first.
        IMAGE_NAME="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REGISTRY_ID}/${_REPO_NAME}:${SHORT_SHA}"
        CONTAINER_NAME="${_REPO_NAME}"

        # --- FIX IS HERE ---
        # Escape the bash variables with $$ to prevent Cloud Build from substituting them.
        # This tells Cloud Build to output a literal string like "/tmp/${CONTAINER_NAME}.env"
        # which the bash shell can then correctly interpret.
        REMOTE_ENV_FILE="/tmp/$${CONTAINER_NAME}.env"

        # --- AND FIX IS HERE ---
        # Use the escaped bash variable in the scp command as well.
        gcloud compute scp /workspace/env_vars ${_GCE_USER}@${_GCE_INSTANCE_NAME}:$${REMOTE_ENV_FILE} --zone ${_GCE_ZONE}

        # The rest of the command is now correct. The local shell will expand IMAGE_NAME and REMOTE_ENV_FILE
        # before passing the command string to gcloud compute ssh.
        gcloud compute ssh ${_GCE_USER}@${_GCE_INSTANCE_NAME} --zone ${_GCE_ZONE} --command=" \
          if [ \\\$(sudo docker ps -q -f name=^\\\$CONTAINER_NAME\\\$) ]; then \
            echo 'Stopping and removing old container...' && \
            sudo docker stop \\\$CONTAINER_NAME && sudo docker rm \\\$CONTAINER_NAME; \
          fi && \
          \
          echo 'Pulling new image...' && \
          sudo docker pull ${IMAGE_NAME} && \
          \
          echo 'Starting new container with environment file...' && \
          sudo docker run -d --name \\\$CONTAINER_NAME --restart=always \
            --env-file ${REMOTE_ENV_FILE} \
            ${IMAGE_NAME} && \
          \
          echo 'Deployment Succeeded. Cleaning up environment file...' && \
          rm ${REMOTE_ENV_FILE} && \
          \
          echo 'Cleanup Succeeded.' \
        "

substitutions:
  _REGION: "us-central1"
  _REGISTRY_ID: "my-applications"
  _GCE_INSTANCE_NAME: "instance-1"
  _GCE_ZONE: "asia-southeast2-a"
  _GCE_USER: "gcloud_user"
  _ENV_SECRET_NAME: "siburger-bot-env"
  _REPO_NAME: "siburger-bot"

options:
  logging: CLOUD_LOGGING_ONLY
