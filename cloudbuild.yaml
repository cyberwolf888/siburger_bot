steps:
  # 1. Build the Docker image
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REGISTRY_ID}/${_REPO_NAME}:${SHORT_SHA}"
      - "."

  # 2. Push the image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REGISTRY_ID}/${_REPO_NAME}:${SHORT_SHA}"

  # 3. Get the application's environment variables from Secret Manager
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - "gcloud secrets versions access latest --secret=${_ENV_SECRET_NAME} > /workspace/env_vars"

  # 4. Deploy to GCE using a secure environment file
  - name: "gcr.io/cloud-builders/gcloud"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Define variables for clarity
        IMAGE_NAME="${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REGISTRY_ID}/${_REPO_NAME}:${SHORT_SHA}"
        CONTAINER_NAME="${_REPO_NAME}"
        REMOTE_ENV_FILE="/tmp/${CONTAINER_NAME}.env"

        # Step 4.1: Securely copy the environment file from the Cloud Build workspace to the GCE instance.
        gcloud compute scp /workspace/env_vars ${_GCE_USER}@${_GCE_INSTANCE_NAME}:${REMOTE_ENV_FILE} --zone ${_GCE_ZONE}

        # Step 4.2: SSH into the instance and run the Docker commands.
        # This is now much cleaner because we use --env-file instead of dozens of -e flags.
        gcloud compute ssh ${_GCE_USER}@${_GCE_INSTANCE_NAME} --zone ${_GCE_ZONE} --command=" \
          if [ \\\$(sudo docker ps -q -f name=^\\\$CONTAINER_NAME\\\$) ]; then \
            echo 'Stopping and removing old container...' && \
            sudo docker stop \\\$CONTAINER_NAME && sudo docker rm \\\$CONTAINER_NAME; \
          fi && \
          \
          echo 'Pulling new image...' && \
          sudo docker pull ${IMAGE_NAME} && \
          \
          echo 'Starting new container with environment file...' && \
          sudo docker run -d --name \\\$CONTAINER_NAME --restart=always \
            --env-file ${REMOTE_ENV_FILE} \
            ${IMAGE_NAME} && \
          \
          echo 'Deployment Succeeded. Cleaning up environment file...' && \
          rm ${REMOTE_ENV_FILE} && \
          \
          echo 'Cleanup Succeeded.' \
        "

# Your substitution variables remain the same. Ensure they are correct in your trigger settings.
substitutions:
  _REGION: "us-central1"
  _REGISTRY_ID: "my-applications"
  _GCE_INSTANCE_NAME: "your-instance-name"
  _GCE_ZONE: "your-instance-zone"
  _GCE_USER: "your-gce-user"
  _ENV_SECRET_NAME: "siburger-bot-env"
  _REPO_NAME: "siburger-bot" # This should match your repo name for consistency

options:
  logging: CLOUD_LOGGING_ONLY
